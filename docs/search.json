{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n.watch-out {\r\n  background-color: lightpink;\r\n  border: 3px solid red;\r\n  font-weight: bold;\r\n}\r\n\r\n\r\n\r\nmtcars[1:5, \"mpg\"]\r\n\r\n\r\n[1] 21.0 21.0 22.8 21.4 18.7\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:34:56+09:00"
    },
    {
      "path": "index.html",
      "title": "R Training for Master Students at the Center for Cognitive Decision Sciences (CDS)",
      "description": "Although you might be intimidated by starting with R, this website is here to help you get established in R so that you will be equipped with the basics of this program! This training is a part of the [CDS Masterproject](https://psychologie.unibas.ch/de/fakultaet/abteilungen/cognitive-and-decision-sciences-305/msc-project/).\n\n**Last updated:** `r format(Sys.time(), \"%a %b %d %X %Y\")`\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nS1 (Fall): Basic R skills\r\nS2 (Spring): Intermediate R skills\r\nS3 (Fall): Advanced R skills\r\nTips to getting started\r\nUseful Links and Resources\r\n\r\nAn overview of the R Training Program timeline - see specific topics belowPlease note that this site is work-in-progress and will be updated throughout the HS21 semester.\r\nS1 (Fall): Basic R skills\r\nS2 (Spring): Intermediate R skills\r\nTo be announced\r\nS3 (Fall): Advanced R skills\r\nTo be announced\r\nTips to getting started\r\nLearning R can be challenging, but ultimately rewarding! Below are some of tips to get you through the learning process easier.\r\nUse the help function The help function in R can help you understand how the function works or what it is doing. You can go to the ‘help’ tab in the viewer pane and type the name of the function its search tab. Note: only functions in the currently loaded packages will show up, so make sure you have the package with the function of interest loaded with the command ‘library(packagename)’. You can also type ?functionname into the console (e.g. ?mean). Every function has documentation, and this command will bring it up. If you don’t know the exact function name, you can also type ??thingIamlooking (e.g. ??mean) to perform a search for related documentation. See this page for how to get help in R.\r\nSearch in forums There are many forums such as stackoverflow.com or stackexchange.com where many people ask questions on R. It is most likely that someone has already asked a question that you have on one of these forums and have provided detailed answers.\r\nDiscuss with other students There are many different ways of solving a problem in R. Chances are that a new, easier solution that you have not thought about emerges from discussing with others. Connect with your fellow students and don’t hesitate to work in groups as well as asking those in higher semesters for help!\r\nUseful Links and Resources\r\nThe internet is full of resources for learning R. Below are few of the most helpful links to support you with your learning.\r\nR for Data Science This online book has great explanations and codes to many of the topics that you will be going through in the R training. It offers in-depth explanations to R as well as to individual functions.\r\nYaRrr! The Pirate’s Guide to R This is another great online book to get you started in R. This book also contains great explanations to R as well as guides to conducting different hypothesis tests such as t-tests, ANOVA and regressions.\r\nIntroduction to Tidyverse Tidyverse is a set of R packages that share a common ‘style’. Tidyverse is a neat, clean and easy style of using R that will help you write even more beautiful code in R. This is also the coding style that we will be using again and again in this training program. Check out Brian Ward’s practical introduction to the most essential functions of Tidyverse.\r\nDatacamp Datacamp is an online learning platform for Data Science. They offer many hands-on lessons and tutorials in R. If you need a little refresher in R, we recommend that you go through the free course Introduction to R in Datacamp.\r\nRStudio Cheatsheets It would be impossible to learn all the different functions in R by heart, and nobody expects you to have these all in memory :) Cheatsheets are a great way to have an overview of the most basic functions and will make your life (with R) much easier.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:34:58+09:00"
    },
    {
      "path": "session0.html",
      "title": "S1 (Fall): Introduction",
      "author": [],
      "contents": "\r\n\r\nContents\r\nIntroduction\r\n\r\nIntroduction\r\nFor the first semester (S1 Fall), there are 10 topics for four modules in this R training. For each topic, we have compiled different online materials for you to go through, as well as assignments for you to test your skills. This program is largely based on the great online tutorials from RStudio called Primers. This training is a self-guided learning, which allows you to engage with the material at your own pace and at times that suit you the most. These topics will help you acquire basic skills in R, which will be most useful in the upcoming CDS Hackathons.\r\nEach session takes around 1-2 hours. The deadline to complete all sessions is by XXX, where you will have a meeting with our CDS team members to review and discuss your progress. For any questions, please write to our PhD student Yunrui Liu.\r\n\r\n#\r\nModule\r\nTopic\r\n1\r\nThe Basics\r\nGetting Started\r\n2\r\nThe Basics\r\nVisualization Basics\r\n3\r\nThe Basics\r\nProgramming Basics\r\n4\r\nWork with Data\r\nWorking with Tibbles/Isolating Data with dplyr\r\n5\r\nWork with Data\r\nDerive Information with dplyr\r\n6\r\nVisualize Data\r\nExploratory Data Analysis\r\n7\r\nVisualize Data\r\nCharts and Plots\r\n8\r\nTidy your Data\r\nReshape Data\r\n9\r\nTidy your Data\r\nSeparate and Unite Columns\r\n10\r\nTidy your Data\r\nJoin Data Sets\r\n11\r\nReview\r\nReview and Meeting with CDS Team\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:06+09:00"
    },
    {
      "path": "session1.html",
      "title": "The Basics: Getting Started",
      "description": "**Session 1**: Getting Started",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1.1 Getting Started\r\n1.2 Importing and Exporting Data\r\nAssignment\r\nSolution\r\n\r\n\r\n1.1 Getting Started\r\nWe assume that you all have some degree of experience with R in your bachelor studies. However, if you are completely new to R or if you haven’t used R for a long time, we recommend that you watch these videos as a refresher.\r\nIntroduction to RStudio from MarinStats \r\nDownload and Install R & RStudio from MarinStats \r\nSimple Arithmetic in R from MarinStats \r\n1.2 Importing and Exporting Data\r\n\r\nOne of the most common, beginner problems that we run into is loading the data in R. Most of these problems arise because there are different functions we need to use for different file types.\r\nRead this chapter from the STHDA wiki page on Importing Data into R, which provides an excellent overview of the different functions to import data from txt, csv and Excel into R and also explanations on how to use them.\r\nTip 1: Focus on the chapters Fast Reading of Data From txt|csv Files into R: readr package and Reading data From Excel Files (xls|xlsx) into R, as these are the most common data files that you will be encountering throughout your R journey!\r\nTip 2: Use the Cheatsheets! They are a great way of quickly looking for a function you need. Click here to download the the cheatsheet for Data Import with readr.\r\nAssignment\r\nWe have uploaded a file on Github called Tourismus, which is a data set from Basel City on Tourism from foreign countries.\r\nCreate a new data set called tourismus by reading in the data on our Github page using this url: https://raw.githubusercontent.com/cdsbasel/rtraining/main/data/Tourismus.csv\r\nInspect the dataset and answer the questions using functions. What does each column show? How many rows are there? Which country had the highest number of tourists? Note. If you get stuck or don’t know where to start, make sure to look at the Useful Links and Resources that we have compiled for you, which you can find on the homepage.\r\nSolution\r\n\r\n\r\nlibrary(tidyverse)\r\n# read file from url\r\ntourismus <- read_csv(\"https://raw.githubusercontent.com/cdsbasel/rtraining/main/data/Tourismus.csv\")\r\n\r\n# inspect dataset\r\nglimpse(tourismus)  \r\nsummary(tourismus)  \r\ntourismus %>% slice_max(Besucher)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:10+09:00"
    },
    {
      "path": "session10.html",
      "title": "Tidy your Data: Join Data Sets",
      "description": "**Session 10**: Join Data Sets",
      "author": [],
      "contents": "\r\n\r\nContents\r\n10.1 Tidying data\r\nAssignment\r\nSolution\r\n\r\n\r\n10.1 Tidying data\r\nOften observations are spread across multiple data sets, and you will have to join data sets into one single table.\r\nGo through the RStudio Primer Separate and Unite Columns and learn about the different functions to join data sets.\r\nAssignment\r\nFor this assignment, we will be joining the dataset taxation we used in Session 2 and 4 and a dataset from Open Data Basel City. You can download this new dataset from this webpage and call it kennzahlen_basel.\r\nLook at the two datasets. Join the kennzahlen_basel to the taxation dataset by year and quarter, retaining only the years that are present in both datasets (2015 to 2017). Your output should look like this:\r\n\r\n# A tibble: 63 x 29\r\n    year quarter            quarter_no     N income_mean income_median\r\n   <dbl> <chr>                   <dbl> <dbl>       <dbl>         <dbl>\r\n 1  2015 Altstadt Grossbas~          1  1675       98117         51000\r\n 2  2015 Vorstädte                   2  2999       99422         58511\r\n 3  2015 Am Ring                     3  6239       75841         52788\r\n 4  2015 Breite                      4  5497       56292         47242\r\n 5  2015 St. Alban                   5  6439      100470         61125\r\n 6  2015 Gundeldingen                6 11541       55575         47248\r\n 7  2015 Bruderholz                  7  4986      115298         65114\r\n 8  2015 Bachletten                  8  8112       77778         57698\r\n 9  2015 Gotthelf                    9  4191       63532         50790\r\n10  2015 Iselin                     10  9739       51788         44777\r\n# ... with 53 more rows, and 23 more variables: income_gini <dbl>,\r\n#   wealth_mean <dbl>, wealth_median <dbl>, wealth_gini <dbl>,\r\n#   Wohnviertel ID <dbl>, Anteil Sozialhilfeempfänger <chr>,\r\n#   Anteil Ausländer <chr>,\r\n#   Anteil Personen ohne Religionszugehörigkeit <chr>,\r\n#   Anteil Personen in Einpersonenhaushalten <chr>,\r\n#   Gymnasialquote <chr>, Altersquotient <chr>,\r\n#   Anteil Sesshafte <chr>, Jugendquotient <chr>,\r\n#   Baujahr der Wohngebäude <dbl>, Anteil Einfamilienhäuser <chr>,\r\n#   Anteil Grünflächen <chr>, Fläche pro Wohnung <dbl>,\r\n#   Wohnfläche pro Person <dbl>,\r\n#   Vermögenssteuer pro Veranlagung <dbl>,\r\n#   Einkommenssteuer pro Veranlagung <dbl>,\r\n#   Erwerbstätigenquote <chr>, Arbeitsplätze pro Einwohner <chr>,\r\n#   Arbeitslosenquote <chr>\r\n\r\nSolution\r\n\r\n\r\ntaxation <- read_csv(\"data/taxation.csv\")\r\nkennzahlen_basel <- read_csv2(\"data/kennzahlen_basel.csv\") \r\n\r\n# change the variable name in kennzahlen_basel to match taxation\r\nkennzahlen_basel <- kennzahlen_basel %>%\r\n  rename(year = Publikationsjahr,\r\n         quarter = `Wohnviertel Name`)\r\n\r\n# join datasets by year and county\r\ncombined_data <- taxation %>%\r\n  inner_join(kennzahlen_basel, by = c(\"year\", \"quarter\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:18+09:00"
    },
    {
      "path": "session11.html",
      "title": "Review",
      "description": "**Session 11**: Review",
      "author": [],
      "contents": "\r\n\r\nContents\r\n11 Final Review\r\n\r\n11 Final Review\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:21+09:00"
    },
    {
      "path": "session2.html",
      "title": "The Basics: Visualization Basics",
      "description": "**Session 2**: Visualization Basics",
      "author": [],
      "contents": "\r\n\r\nContents\r\n2.1 Understanding ggplot2\r\nAssignment\r\nSolution\r\n\r\n\r\n2.1 Understanding ggplot2\r\nThere are many ways to Rome, and there are many ways to create a graphic using different packages and function in R. :)\r\nWe will be focusing on ggplot2, a package part of the tidyverse, which is great in creating beautiful graphics. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.\r\nGo through the RStudio Primer on Data Visualization Basics and complete the assignments below.\r\nTip 1: Again, cheatsheets will make your (R) life easy! Click here to download the cheatsheet for Data Visualization with ggplot2.\r\nTip 2: Check out the R graph gallery for an example of graphics and code.\r\nAssignment\r\nIn our Github page, there is a data called taxation, which is data from Basel on income and inequality.\r\nCreate a data set called taxation using the file on our Github page. This time, download the data on your computer and read it in R locally. Click this link to access the folder.\r\nCreate a plot using this data set. Make a plot with year and a variable of interest (e.g. Median Income), and show the different quarters. Include a title, subtitle, legend, and rename the axis labs.\r\nBelow is an example of a plot showing the median income of the quarters by year. Note. If you want to control the order of the discrete variables, you need to know some wrangling. Although you will learn about these functions in later sessions, you can already try to sort the variable “quarter” with arrange() and turn it into a factor with mutate().\r\n\r\nSolution\r\n\r\n\r\nlibrary(tidyverse)\r\ntaxation <- read_csv(\"data/taxation.csv\")\r\n\r\n# make plot as 'my_plot'\r\nmy_plot <- taxation %>%\r\n  arrange(year, income_median) %>%\r\n  mutate(quarter = as_factor(quarter)) %>%\r\n  ggplot(aes(x = year, \r\n           y = income_median, \r\n           col = quarter)) +\r\n  geom_line() + \r\n  geom_point() +\r\n  theme_minimal() +\r\n  theme(\r\n    legend.position = \"bottom\",\r\n    legend.title = element_blank(),\r\n    # reduce legend text size\r\n    legend.text = element_text(size = 7)) +\r\n  labs(x = \"Year\",\r\n     y = \"Median income\",\r\n     title = \"Inequality in Basel\",\r\n     subtitle = \"Income development in Basel Quarters\",\r\n     caption = \"Source: Open Data from Basel City\")\r\n\r\n# save plot\r\nggsave(filename = \"inequality_basel.png\",\r\n       plot = my_plot,\r\n       device = \"png\",\r\n       path = \"resources/session2\",\r\n       width = 7, \r\n       height = 7)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:25+09:00"
    },
    {
      "path": "session3.html",
      "title": "The Basics: Programming Basics",
      "description": "**Session 3**: Programming Basics",
      "author": [],
      "contents": "\r\n\r\nContents\r\n3.3 Learning the R language\r\n\r\n3.3 Learning the R language\r\nTo use R while understanding it’s language will help you use R more easily. In this session, you will learn about\r\nfunctions and their arguments\r\nobjects\r\nR’s basic data types\r\nR’s basic data structures including vectors and lists\r\nR’s package system\r\nGo through the RStudio Primer on Programming Basics.\r\nThere are no additional assignments for this session.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:27+09:00"
    },
    {
      "path": "session4.html",
      "title": "Work with Data: Working with Tibbles/Isolating Data with dplyr",
      "description": "**Session 4**: Working with Tibbles/Isolating Data with dplyr",
      "author": [],
      "contents": "\r\n\r\nContents\r\n4.1 Working with Tibbles\r\n4.2 Isolating Data with dplyr\r\nAssignment\r\nSolution\r\n\r\n\r\n4.1 Working with Tibbles\r\nThroughout this R Training, you will mostly be confronted with tibbles. Tibbles, or tbl_df, are in fact data frames, but they keep what has proven to be effective, and throwing out what is not.\r\nAccording to the tibble documentation, tibbles are “data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects.”\r\nGo through the RStudio Primer 2.1 on Working with Tibbles, which will give you a sneak peak into the world of tibbles. If you want to learn more on tibbles and data frames, we highly recommend reading the tibbles chapter in R for Data Science.\r\n4.2 Isolating Data with dplyr\r\nWhen you have your dataset loaded and ready to go, you will first need to look at your data and make some changes before computing analyses or making visualizations. With the dplyr package, you can easily manipulate and transform your data so that you can work with it much better. In this and the following session, you will learn about a few of the most important and useful functions for data manipulation. These functions are essential for working with data in R, so take some time to understand them thoroughly and play around with them on your own data!\r\nGo through the RStudio Primer on Isolating Data with dplyr, and complete the assignments below.\r\nTip 1: dplyr also has a cheatsheet for you - download it here.\r\nAssignment\r\nWe will be using the taxation data set from Session 2. The four assignments do not build upon each other.\r\nSelect the columns year, quarter, income_mean and income_median using select(). Try to figure out more than one way to select the columns.\r\nSelect all columns with the name wealth. Note. Try using starts_with()or contains().\r\nFilter quarters that had a mean income of over 60000 in the year 2017. What are the quarters?\r\nArrange rows by year and income_mean The output should look like this:\r\n\r\n\r\n\r\n# A tibble: 357 x 10\r\n    year quarter            quarter_no     N income_mean income_median\r\n   <dbl> <chr>                   <dbl> <dbl>       <dbl>         <dbl>\r\n 1  2001 Klybeck                    18  4053       45651         42777\r\n 2  2001 Rosental                   16  2499       46221         42100\r\n 3  2001 Kleinhüningen              19  1363       46859         44115\r\n 4  2001 Clara                      13  2416       47435         40964\r\n 5  2001 St. Johann                 11 10493       48766         43118\r\n 6  2001 Matthäus                   17  9089       48892         41500\r\n 7  2001 Iselin                     10  9853       49631         45530\r\n 8  2001 Gundeldingen                6 11224       51229         46265\r\n 9  2001 Altstadt Kleinbas~         12  1659       51648         40387\r\n10  2001 Breite                      4  5433       52039         47227\r\n# ... with 347 more rows, and 4 more variables: income_gini <dbl>,\r\n#   wealth_mean <dbl>, wealth_median <dbl>, wealth_gini <dbl>\r\n\r\nSolution\r\n\r\n\r\ntaxation <- read_csv(\"data/taxation.csv\")\r\n\r\n# select columns\r\ntaxation %>% select(year, quarter, income_mean, income_median)\r\ntaxation %>% select(!c(quarter_no, N, income_gini, wealth_mean, wealth_median, wealth_gini))\r\n\r\n# select columns starting with \"wealth\"\r\ntaxation %>% select(starts_with(\"wealth\"))\r\n\r\n# filter quarters\r\ntaxation %>% filter(income_mean >60000 & year == 2017)\r\n\r\n# arrange rows \r\ntaxation %>% arrange(year, income_mean)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:30+09:00"
    },
    {
      "path": "session5.html",
      "title": "Work with Data: Derive Information with dplyr",
      "description": "**Session 5**: Derive Information with dplyr",
      "author": [],
      "contents": "\r\n\r\nContents\r\n5.1 Derive Information with dplyr\r\nAssignment\r\nSolution\r\n\r\n\r\n5.1 Derive Information with dplyr\r\nIn this session, you will continue learning data manipulation with dplyr.\r\nGo through the RStudio Primer on Derive Information with dplyr, and complete the assignments below.\r\nAssignment\r\nUsing the taxation dataset, complete the following tasks:\r\nCreate a new column called income_labels from income_mean, where you have 4 new income categories below 50000, 5000-79999, 8000-109999, and above 110000. You can code the categories as numbers from 1 to 4.\r\nHow many quarters are there for each of the four categories by year? Use group_by() and summarize() to answer. You can make a table like this:\r\n\r\n# A tibble: 60 x 3\r\n# Groups:   year [17]\r\n    year income_labels number_quarters\r\n   <dbl> <chr>                   <int>\r\n 1  2001 1                           7\r\n 2  2001 2                           8\r\n 3  2001 3                           6\r\n 4  2002 1                           6\r\n 5  2002 2                           9\r\n 6  2002 3                           6\r\n 7  2003 1                           6\r\n 8  2003 2                           9\r\n 9  2003 3                           6\r\n10  2004 1                           6\r\n# ... with 50 more rows\r\n\r\nSolution\r\n\r\n\r\ntaxation <- read_csv(\"data/taxation.csv\")\r\n\r\n# create new column\r\ntaxation = mutate(taxation, income_labels = case_when(income_mean < 50000 ~ \"1\",\r\n                                              income_mean >= 50000 & income_mean < 80000 ~ \"2\",\r\n                                              income_mean >= 80000 & income_mean < 110000 ~ \"3\",\r\n                                              income_mean >= 110000  ~ \"4\"))\r\n\r\n# count observations by year and quarter\r\nnew_taxation = taxation %>% \r\n  group_by(year, income_labels) %>%\r\n  summarise(number_quarters = n()) %>%\r\n  print()\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:33+09:00"
    },
    {
      "path": "session6.html",
      "title": "Visualize Data: Exploratory Data Analysis",
      "description": "**Session 6**: Exploratory Data Analysis",
      "author": [],
      "contents": "\r\n\r\nContents\r\n6.1 Explore your data\r\n\r\n6.1 Explore your data\r\n\r\nIn this module, you will learn how to use ggplot2 to visualize patterns within values and relationships between variables. You will first learn Exploratory data analysis or EDA, a way to use visualization and transformation to explore your data systematically.\r\nGo through the RStudio Primer on Exploratory Data Analysis and think about possible graphics that you can employ for EDA in your own master project.\r\nThere are no additional assignments for this session.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:40+09:00"
    },
    {
      "path": "session7.html",
      "title": "Visualize Data: Charts and Plots",
      "description": "**Session 7**: Charts and Plots",
      "author": [],
      "contents": "\r\n\r\nContents\r\n7.1 Making graphics\r\nAssignment\r\nSolution\r\n\r\n\r\n7.1 Making graphics\r\nIn the previous session, you learned how you can systematically explore your data and which questions to ask in order to determine the best visualizations for your data. In this session, you will learn about the individual charts and plots and how to make them.\r\nGo through the following RStudio Primers:\r\nBar charts\r\nHistograms\r\nBoxplots and Counts\r\nScatterplots\r\nLine Plots\r\nOverplotting and Big Data\r\nCustomize Your Plots\r\nAssignment\r\nDownload and read the verbrechen data from our Github page, or read it directly using this url: https://raw.githubusercontent.com/cdsbasel/rtraining/main/data/verbrechen.csv\r\nLook at the data using the functions that you have learned in the previous sessions to get a general idea of the variables. You can use e.g. group_by(), summarize() and filter(). Some ideas for questions are: What is the minimum, mean and maximum number of verbrechen by state? What type of verbrechen is the most common type?\r\nMake a Scatterplot between bevoelkerung and a type of crime of your choice. Adjust the colour or shape of the dots to show the different states or counties. You will have to use the functions mentioned above to first manipulate your data.\r\nTip 1: To show the thousand separators in the axis labels, add scale_y_continuous(labels = comma) + scale_x_continuous(labels = comma) from the package scales in your code.\r\nHere is an example of a scatterplot:\r\n\r\nTip 2: Of course, there is a ggplot2 cheatsheet for Data Visualization as well :)\r\nSolution\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(scales) # to later add commas to the axis numbers\r\nverbrechen <- read_csv(\"data/verbrechen.csv\")\r\n\r\n# for axis numbers\r\noptions(scipen=10000)\r\n\r\n# make plot as 'my_plot'\r\nmy_plot <- verbrechen %>%\r\n  filter(verbrechen == \"diebstahl\" ) %>%\r\n  group_by(staat) %>%\r\n  summarise(sum = sum(haeufigkeit),\r\n            population = sum(bevoelkerung)) %>%\r\n  ggplot(aes(x = population, \r\n             y = sum, \r\n             col = staat)) +\r\n  geom_point(size = 3) +\r\n  theme_minimal() +\r\n  theme(\r\n    legend.position = \"bottom\",\r\n    legend.title = element_blank(),\r\n    # reduce legend text size\r\n    legend.text = element_text(size = 9)) +\r\n  labs(x = \"Population\",\r\n       y = \"Frequency\",\r\n       title = \"Crime in the States\",\r\n       subtitle = \"Relationship between Population and Frequency of Theft by State\",\r\n       caption = \"Source: Open Data from UCI Machine Learning Repository\") +\r\n  scale_y_continuous(labels = comma) +\r\n  scale_x_continuous(labels = comma)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:43+09:00"
    },
    {
      "path": "session8.html",
      "title": "Tidy your Data: Reshape Data",
      "description": "**Session 8**: Reshape Data",
      "author": [],
      "contents": "\r\n\r\nContents\r\n8.1 Tidying data\r\nAssignment\r\nSolution\r\n\r\n\r\n8.1 Tidying data\r\n In order to work with your data more efficiently, you should store it as tidydata. In tidy data, each variable forms a column, and each observation forms a row. This is crucial for data manipulation, visualization and further analyses. If you keep all your data tidy, you will not have to spend hours transforming one format of data into another, in order to run analyses or to make graphics in R.\r\nIn the last 4 sessions, you will learn how to tidy your data with ease. For this session, you will familiarize yourself with the functions pivot_longer() and pivot_wider(), which are modern alternatives to gather() and spread(). With pivot_longer() and pivot_wider(), you can manipulate the layout of your data set.\r\nGo through the Tidy Data Topic in RStudio Primer Reshape Data. Then, read the chapter Pivoting in R for Data Science and complete the exercises there.\r\nTip 1: The cheatsheet Data Wrangling with dplyr and tidyr has visual examples of what the tidying functions do to the data set, which will be of use in these last sessions.\r\nAssignment\r\nFor this assignment, you will use the billboard dataset that comes with the tidyr() package. This dataset shows the billboard rank of songs in the year 2000.\r\nLook the the billboard data set. You will need to load tidyr() and dplyr() individually, because the data set is embedded in the packages.\r\nUsing a pivot function, make a new dataset called billboard_longer, and store the weeks to a variable named week and the values to rank. Drop the missing values.\r\nCalculate the average rank of each song. Which three songs have the highest average rank? Did you know these songs already? You should get a table as such:\r\n\r\n\r\n\r\n# A tibble: 316 x 2\r\n   track                   average\r\n   <chr>                     <dbl>\r\n 1 Maria, Maria               10.5\r\n 2 Music                      13.5\r\n 3 Bye Bye Bye                14.3\r\n 4 Hot Boyz                   14.3\r\n 5 Independent Women Pa...    14.8\r\n 6 Be With You                15.8\r\n 7 Try Again                  16.7\r\n 8 I Knew I Loved You         17.4\r\n 9 My Love Is Your Love       17.9\r\n10 There U Go                 18.6\r\n# ... with 306 more rows\r\n\r\nSolution\r\n\r\n\r\n# load packages individually, in order to load the \"billboard\" dataset\r\nbillboard_longer <- billboard %>% \r\n  pivot_longer(\r\n    cols = starts_with(\"wk\"), \r\n    names_to = \"week\", \r\n    names_prefix = \"wk\",\r\n    values_to = \"rank\",\r\n    values_drop_na = TRUE,\r\n  )\r\n\r\nbillboard_longer %>%\r\n  group_by(track) %>%\r\n  summarise(average = mean(rank)) %>%\r\n  arrange(average)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:46+09:00"
    },
    {
      "path": "session9.html",
      "title": "Tidy your Data: Separate and Unite Columns",
      "description": "**Session 9**: Separate and Unite Columns",
      "author": [],
      "contents": "\r\n\r\nContents\r\n9.1 Tidying data\r\nAssignment\r\nSolution\r\n\r\n\r\n9.1 Tidying data\r\nIn the last session, you learned how to use pivot_longer() and pivot_wider() to tidy the layout of your data. In this session, you will learn how to separate or combine cells using separate() and unite().\r\nGo through the RStudio Primer Separate and Unite Columns.\r\nAssignment\r\nReload the billboard dataset from the package tidyr.\r\nSeparate the column data.entered into three new columns containing the corresponding values: year, month and date.\r\nReunite the three columns back into data.entered, but leave the three columns in the dataset. Your dataset should look like this:\r\n\r\n\r\n\r\n# A tibble: 317 x 82\r\n   artist track date.entered year  month date    wk1   wk2   wk3   wk4\r\n   <chr>  <chr> <chr>        <chr> <chr> <chr> <dbl> <dbl> <dbl> <dbl>\r\n 1 2 Pac  Baby~ 2000-02-26   2000  02    26       87    82    72    77\r\n 2 2Ge+h~ The ~ 2000-09-02   2000  09    02       91    87    92    NA\r\n 3 3 Doo~ Kryp~ 2000-04-08   2000  04    08       81    70    68    67\r\n 4 3 Doo~ Loser 2000-10-21   2000  10    21       76    76    72    69\r\n 5 504 B~ Wobb~ 2000-04-15   2000  04    15       57    34    25    17\r\n 6 98^0   Give~ 2000-08-19   2000  08    19       51    39    34    26\r\n 7 A*Tee~ Danc~ 2000-07-08   2000  07    08       97    97    96    95\r\n 8 Aaliy~ I Do~ 2000-01-29   2000  01    29       84    62    51    41\r\n 9 Aaliy~ Try ~ 2000-03-18   2000  03    18       59    53    38    28\r\n10 Adams~ Open~ 2000-08-26   2000  08    26       76    76    74    69\r\n# ... with 307 more rows, and 72 more variables: wk5 <dbl>,\r\n#   wk6 <dbl>, wk7 <dbl>, wk8 <dbl>, wk9 <dbl>, wk10 <dbl>,\r\n#   wk11 <dbl>, wk12 <dbl>, wk13 <dbl>, wk14 <dbl>, wk15 <dbl>,\r\n#   wk16 <dbl>, wk17 <dbl>, wk18 <dbl>, wk19 <dbl>, wk20 <dbl>,\r\n#   wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>, wk25 <dbl>,\r\n#   wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\r\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>,\r\n#   wk36 <dbl>, wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>,\r\n#   wk41 <dbl>, wk42 <dbl>, wk43 <dbl>, wk44 <dbl>, wk45 <dbl>,\r\n#   wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, wk49 <dbl>, wk50 <dbl>,\r\n#   wk51 <dbl>, wk52 <dbl>, wk53 <dbl>, wk54 <dbl>, wk55 <dbl>,\r\n#   wk56 <dbl>, wk57 <dbl>, wk58 <dbl>, wk59 <dbl>, wk60 <dbl>,\r\n#   wk61 <dbl>, wk62 <dbl>, wk63 <dbl>, wk64 <dbl>, wk65 <dbl>,\r\n#   wk66 <lgl>, wk67 <lgl>, wk68 <lgl>, wk69 <lgl>, wk70 <lgl>,\r\n#   wk71 <lgl>, wk72 <lgl>, wk73 <lgl>, wk74 <lgl>, wk75 <lgl>,\r\n#   wk76 <lgl>\r\n\r\nSolution\r\n\r\n\r\nbillboard_new = billboard %>%\r\n  separate(date.entered, into = c(\"year\", \"month\", \"date\"), sep = \"-\")\r\n\r\nbillboard_new %>%\r\n  unite(date.entered, year, month, date, sep = \"-\", remove = F)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-18T23:35:48+09:00"
    }
  ],
  "collections": []
}
